steps:
- name: "gcr.io/cloud-builders/docker"
  id: "Build the docker container"
  args: ["build", "-t", "gcr.io/$PROJECT_ID/stats-pipeline:$_DOCKER_TAG", "."]

- name: "gcr.io/cloud-builders/docker"
  id: "Push the docker container to gcr.io"
  args: ["push", "gcr.io/$PROJECT_ID/stats-pipeline:$_DOCKER_TAG"]

- name: "gcr.io/cloud-builders/kubectl"
  id: "Create configmap manifest"
  entrypoint: /bin/bash
  args:
    - -c
    - |
      kubectl create configmap stats-pipeline-config \
      --from-file=k8s/data-processing/config -o yaml --dry-run > \
      configmap-manifest.json

- name: "gcr.io/cloud-builders/kubectl"
  id: "Apply configmap"
  args:
    - apply
    - -f
    - configmap-manifest.json
  env:
  - CLOUDSDK_COMPUTE_REGION=$_COMPUTE_REGION
  - CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER

- name: "gcr.io/cloud-builders/gcloud"
  id: "Generate manifest for stats-pipeline deployment"
  entrypoint: /bin/sh
  args:
  - -c
  - |
    sed 's/{{GCLOUD_PROJECT}}/${PROJECT_ID}/g' \
    k8s/data-processing/deployments/stats-pipeline.yaml.template > \
    manifest.yaml

- name: "gcr.io/cloud-builders/gke-deploy"
  id: "Create stats-pipeline deployment"
  args:
  - run
  - --filename=manifest.yaml
  - --image=gcr.io/$PROJECT_ID/stats-pipeline:$_DOCKER_TAG
  - --location=$_COMPUTE_REGION
  - --cluster=$_CLUSTER
  # gke-deploy will fail if the output folder is non-empty, thus we use
  # different folders for the two executions of this tool.
  - --output=pipeline/

- name: "gcr.io/cloud-builders/kubectl"
  id: "Create stats-pipeline service"
  args:
    - apply
    - -f
    - k8s/data-processing/services/stats-pipeline.yaml
  env:
  - CLOUDSDK_COMPUTE_REGION=$_COMPUTE_REGION
  - CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER

- name: "gcr.io/cloud-builders/gcloud"
  id: "Generate manifest for annotation-export deployment"
  entrypoint: /bin/sh
  args:
  - -c
  - |
    sed 's/{{GCLOUD_PROJECT}}/${PROJECT_ID}/g' \
    k8s/data-processing/deployments/annotation-export-template.yaml > \
    annotation-export-manifest.yaml

# Annotation export deployment and service.
- name: "gcr.io/cloud-builders/gke-deploy"
  id: "Create annotation-export deployment"
  args:
  - run
  - --filename=annotation-export-manifest.yaml
  - --image=gcr.io/$PROJECT_ID/stats-pipeline:$_DOCKER_TAG
  - --location=$_COMPUTE_REGION
  - --cluster=$_CLUSTER
  # gke-deploy will fail if the output folder is non-empty, thus we use
  # different folders for the two executions of this tool.
  - --output=annotation-export/

- name: "gcr.io/cloud-builders/kubectl"
  id: "Create annotation-export service"
  args:
    - apply
    - -f
    - k8s/data-processing/services/annotation-export.yaml
  env:
  - CLOUDSDK_COMPUTE_REGION=$_COMPUTE_REGION
  - CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER

- name: "gcr.io/cloud-builders/docker"
  id: "Build the stats-pipeline-runner docker container"
  args: ["build", "-t", "gcr.io/$PROJECT_ID/stats-pipeline-runner:$_DOCKER_TAG", "maptiles/"]

- name: "gcr.io/cloud-builders/docker"
  id: "Push the stats-pipeline-runner docker container to gcr.io"
  args: ["push", "gcr.io/$PROJECT_ID/stats-pipeline-runner:$_DOCKER_TAG"]

- name: "gcr.io/cloud-builders/gcloud"
  id: "Generate manifest for the stats-pipeline-cronjob"
  entrypoint: /bin/sh
  args:
  - -c
  - |
    sed -e 's/{{GCLOUD_PROJECT}}/${PROJECT_ID}/g' \
    -e "s/{{PIPELINE_CRON_SCHEDULE}}/${_PIPELINE_CRON_SCHEDULE}/g" \
    k8s/data-processing/jobs/stats-pipeline-cronjob.yaml.template > \
    stats-pipeline-cronjob.yaml

- name: "gcr.io/cloud-builders/gcloud"
  id: "Generate manifest for the annotation-export-cronjob"
  entrypoint: /bin/sh
  args:
  - -c
  - |
    sed -e 's/{{GCLOUD_PROJECT}}/${PROJECT_ID}/g' \
    -e "s/{{ANNOTATION_EXPORT_CRON_SCHEDULE}}/${_ANNOTATION_EXPORT_CRON_SCHEDULE}/g" \
    k8s/data-processing/jobs/annotation-export-cronjob.template > \
    annotation-export-cronjob.yaml

- name: "gcr.io/cloud-builders/gke-deploy"
  id: "Create stats-pipeline CronJob"
  args:
  - run
  - --filename=stats-pipeline-cronjob.yaml
  - --image=gcr.io/$PROJECT_ID/stats-pipeline-runner:$_DOCKER_TAG
  - --location=$_COMPUTE_REGION
  - --cluster=$_CLUSTER
  # gke-deploy will fail if the output folder is non-empty, thus we use
  # different folders for the two executions of this tool.
  - --output=stats-pipeline-runner/

- name: "gcr.io/cloud-builders/gke-deploy"
  id: "Create annotation-export CronJob"
  args:
  - run
  - --filename=annotation-export-cronjob.yaml
  - --image=gcr.io/$PROJECT_ID/stats-pipeline-runner:$_DOCKER_TAG
  - --location=$_COMPUTE_REGION
  - --cluster=$_CLUSTER
  # gke-deploy will fail if the output folder is non-empty, thus we use
  # different folders for the two executions of this tool.
  - --output=annotation-export-runner/